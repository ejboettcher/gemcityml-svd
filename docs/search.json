[
  {
    "objectID": "svd_greenAI.html#ax-b-0",
    "href": "svd_greenAI.html#ax-b-0",
    "title": "Linear Algebra for ML/AI aka Green AI",
    "section": "Ax-b = 0",
    "text": "Ax-b = 0\nSystem of Linear Equations\nSolving a system of linear equations is fast.\n  It can easily and quickly handle large data.\n\nSo if you can get your problems into the Ax=b form; your golden."
  },
  {
    "objectID": "svd_greenAI.html#axb-in-action",
    "href": "svd_greenAI.html#axb-in-action",
    "title": "Linear Algebra for ML/AI aka Green AI",
    "section": "Ax=b, in action",
    "text": "Ax=b, in action\nSystem of linear equations\n3x + 4y = 19\n2y + 3z = 8\n4x - 5z = 7\n\nIn Matrix form\n\n\n\\[\nA = \\begin{bmatrix}\n     3 & 4 & 0\\\\\n     0 & 2 & 3 \\\\\n     4 & 0 & -5\n    \\end{bmatrix}\n\\]\n\n\\[\nb = \\begin{bmatrix}\n   19 \\\\\n    8\\\\\n   7\n  \\end{bmatrix}\n\\]"
  },
  {
    "objectID": "svd_greenAI.html#what-if-you-dont-have-a-full-rank-matrix",
    "href": "svd_greenAI.html#what-if-you-dont-have-a-full-rank-matrix",
    "title": "Linear Algebra for ML/AI aka Green AI",
    "section": "What if you don’t have a “Full Rank” matrix",
    "text": "What if you don’t have a “Full Rank” matrix\nOr systems that can be fulled solved?\nThis is where SVD (Single Value Decomposition) comes to the rescue. \nBeyond solving a system of linear equations.\n It is used for:\n\nIt is used to compress images\nFind main features (see compressed images)\nfor fitting Polynomial.\nPredict Sun spots activity\n\nAs long as you can get your problem into the Ax=b form."
  },
  {
    "objectID": "svd_greenAI.html#svd",
    "href": "svd_greenAI.html#svd",
    "title": "Linear Algebra for ML/AI aka Green AI",
    "section": "SVD",
    "text": "SVD\nSingular value decomposition (SVD) is a factorization of a real or complex matrix.\n\nSVD of Matrix A is: \n\nSVD(A) = \\(U \\Sigma V^T\\)\n\n\nSo when we system that can be written as: Ax=b\n\nWe can solve for x by:\n\n\\[\nx^\\prime = V \\Sigma U^T b\n\\]\nThen \\(x^\\prime\\) is the solution that has the minimum norm (closest to origin). If it is not in the range, then it is the least-squares solution."
  },
  {
    "objectID": "svd_greenAI.html#wow-that-was-clear.",
    "href": "svd_greenAI.html#wow-that-was-clear.",
    "title": "Linear Algebra for ML/AI aka Green AI",
    "section": "Wow that was clear.",
    "text": "Wow that was clear.\nTake a minute and google how to multiply matrixs\n \nGreat resource: SVD Tutorial"
  },
  {
    "objectID": "svd_greenAI.html#sun-spots-predictions",
    "href": "svd_greenAI.html#sun-spots-predictions",
    "title": "Linear Algebra for ML/AI aka Green AI",
    "section": "Sun Spots predictions",
    "text": "Sun Spots predictions\nThere exists a data set that contains the number of sun spots observed for a given month, spanning hundreds of years.  \nhttps://github.com/ejboettcher/GemCity-ML-AI_Random\n \nIn the above tutorial, I used tensorflow, WITH GPU and it took several minutes to train the algorithm to predict sunspot activity. And it was good.\n \nCan SVD predict sunspot activity and faster?\n\nYes\nYes"
  },
  {
    "objectID": "svd_greenAI.html#blindly-use-an-svd",
    "href": "svd_greenAI.html#blindly-use-an-svd",
    "title": "Linear Algebra for ML/AI aka Green AI",
    "section": "Blindly use an SVD",
    "text": "Blindly use an SVD\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nsunspot_data = pd.read_csv(\"data/Sunspots.csv\")\nsunspot_data['time'] = pd.to_datetime(sunspot_data['Date'], format='%Y-%m-%d')\nnname = 'Monthly Mean Total Sunspot Number'\n\nwindow = 1\ndataset = np.ones((len(sunspot_data)-window, window))\nfor ii in range(len(dataset)):\n    dataset[ii,:] = sunspot_data.loc[ii:ii+window-1, nname].to_numpy().T\n\nA = dataset\nA = np.column_stack([np.ones(A.shape[0]), A])\nb = sunspot_data.loc[window:, nname].to_numpy()\n\n# calculate the economy SVD for the data matrix A\nU,S,Vt = np.linalg.svd(A, full_matrices=False)\n\n# solve Ax = b for the best possible approximate solution in terms of least squares\nx_hat = Vt.T @ np.linalg.inv(np.diag(S)) @ U.T @ b\n\n# perform train and test inference\nb_pred = A @ x_hat\n\ntrain_data = pd.DataFrame({'time':sunspot_data.loc[window:,'time'],\n                           'b':b, \n                           'b_pred':b_pred} )\ntrain_data.plot(x='time', y=['b', 'b_pred'])\n\n# compute train and test MSE\ntrain_mse = np.mean(np.sqrt((b_pred - b)**2))\nprint(\"Train Mean Squared Error:\", train_mse)\nplt.show()\n\nTrain Mean Squared Error: 19.273508962865446"
  },
  {
    "objectID": "svd_greenAI.html#more-features",
    "href": "svd_greenAI.html#more-features",
    "title": "Linear Algebra for ML/AI aka Green AI",
    "section": "More features",
    "text": "More features\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\nsunspot_data = pd.read_csv(\"data/Sunspots.csv\")\nsunspot_data['time'] = pd.to_datetime(sunspot_data['Date'], format='%Y-%m-%d')\nnname = 'Monthly Mean Total Sunspot Number'\n\nwindow = 12\ndataset = np.ones((len(sunspot_data)-window, window))\nfor ii in range(len(dataset)):\n    dataset[ii,:] = sunspot_data.loc[ii:ii+window-1, nname].to_numpy().T\n\nA = dataset\nA = np.column_stack([np.ones(A.shape[0]), A])\nb = sunspot_data.loc[window:, nname].to_numpy()\n\n# calculate the economy SVD for the data matrix A\nU,S,Vt = np.linalg.svd(A, full_matrices=False)\n\n# solve Ax = b for the best possible approximate solution in terms of least squares\nx_hat = Vt.T @ np.linalg.inv(np.diag(S)) @ U.T @ b\n\n# perform train and test inference\nb_pred = A @ x_hat\n\ntrain_data = pd.DataFrame({'time':sunspot_data.loc[window:,'time'],\n                           'b':b, \n                           'b_pred':b_pred} )\ntrain_data.plot(x='time', y=['b', 'b_pred'])\n\n# compute train and test MSE\ntrain_mse = np.mean(np.sqrt((b_pred - b)**2))\nprint(\"Train Mean Squared Error:\", train_mse)\nplt.show()\n\nTrain Mean Squared Error: 17.875197212239335"
  },
  {
    "objectID": "svd_greenAI.html#prove-it-on-data-it-has-not-seen.",
    "href": "svd_greenAI.html#prove-it-on-data-it-has-not-seen.",
    "title": "Linear Algebra for ML/AI aka Green AI",
    "section": "Prove it on data it has not seen.",
    "text": "Prove it on data it has not seen.\n\nsplit_num = 3000\nA = dataset\nA = np.column_stack([np.ones(A.shape[0]), A])\nX_train = A[:split_num,:]\ny_train = sunspot_data.loc[window:split_num+window-1, nname].to_numpy()\n\nX_test = A[split_num:,:]\ny_test = sunspot_data.loc[split_num+window:, nname].to_numpy()\n\nprint(X_test.shape, y_test.shape, X_train.shape, y_train.shape)\n# calculate the economy SVD for the data matrix A\nU,S,Vt = np.linalg.svd(X_train, full_matrices=False)\n\n# solve Ax = b for the best possible approximate solution in terms of least squares\nx_hat = Vt.T @ np.linalg.inv(np.diag(S)) @ U.T @ y_train\n\n# perform train and test inference\ny_pred = X_train @ x_hat\ntest_predictions = X_test @ x_hat  # This is the MAGIC\n\ntest_data =  pd.DataFrame({'time':sunspot_data.loc[split_num+window:,'time'],\n                           'test':y_test, \n                           'y_pred':test_predictions} )\ntest_data.plot(x='time', y=['test', 'y_pred'])\n\n\n# compute train and test MSE\ntrain_mse = np.mean(np.sqrt((y_pred - y_train)**2))\ntest_mse = np.mean(np.sqrt((test_predictions - y_test)**2))\n\nprint(\"Train Mean Squared Error:\", train_mse)\nprint(\"Test Mean Squared Error:\", test_mse)\nplt.show()\n\n(223, 13) (223,) (3000, 13) (3000,)\nTrain Mean Squared Error: 18.20793849887562\nTest Mean Squared Error: 13.688869408003756"
  },
  {
    "objectID": "svd_greenAI.html#what-explain-again-what-an-svd-does.",
    "href": "svd_greenAI.html#what-explain-again-what-an-svd-does.",
    "title": "Linear Algebra for ML/AI aka Green AI",
    "section": "What, explain again what an SVD does.",
    "text": "What, explain again what an SVD does.\nLet’s take a look at how SVD can be used for image compression.\n (tutorial)[https://sthalles.github.io/svd-for-regression/]"
  },
  {
    "objectID": "svd_greenAI.html#thank-you",
    "href": "svd_greenAI.html#thank-you",
    "title": "Linear Algebra for ML/AI aka Green AI",
    "section": "Thank you",
    "text": "Thank you\nSVD can just do it. You just need to get it into the Ax=B form.\n\n\n\nGem City Tech ML/AI"
  },
  {
    "objectID": "OpenRemarks.html#gem-city-ml",
    "href": "OpenRemarks.html#gem-city-ml",
    "title": "Gem City ML",
    "section": "Gem City ML",
    "text": "Gem City ML\n\n\nGem City ML’s goal is to have a space where people can present and learn new ML/AI ideas, ask for help on problems they are working on, and meet new people.\n\nWe have short talks about machine learning (ML) and how to get into this field.\n\nThe format is:\n\nSocial: ~ 30 min\nLecture: ~ 1 hour\nSocial: ~ 30 min\n\nTalks have ranged from MLOps, modeling CO2 to predict occupancy, to A/B Testing.\n\nMeetings:\n\nTime: Third Thursday at 6pm\nLocation: the Innovation Hub / Arcade in Downtown Dayton\n\n\n\n\n\nMeetup \n\n\nDiscord"
  },
  {
    "objectID": "OpenRemarks.html#gem-city-tech",
    "href": "OpenRemarks.html#gem-city-tech",
    "title": "Gem City ML",
    "section": "Gem City Tech",
    "text": "Gem City Tech\n\n\nGemCity TECH’s mission is to grow the Dayton’s industry and the community by providing a centralized destination for technical training, workshops and providing a forum for collaborating.\n\nCurrently, supports several special interest groups from a variety of technical disciplines.\n\nDayton Web Developers\nDayton Dynamic Languages\nDayton .net Developers\nGem City Games Developments\nNew to Tech\nFrameworks\nMachine Learning / Artificial Intelligence (ML/AI)\nCode for Dayton\nGem City Mechatronics\nAutonomous Miami Valley\n\n\n\n\n\nMeetup \n\n\nDiscord"
  },
  {
    "objectID": "OpenRemarks.html#big-thanks-to-our-sponsors",
    "href": "OpenRemarks.html#big-thanks-to-our-sponsors",
    "title": "Gem City ML",
    "section": "Big Thanks to our Sponsors",
    "text": "Big Thanks to our Sponsors\n \n\n\nGem City Tech\n\n\nThe Hub\n\n\nTechnology First\n\n\n\n\n\n\nHuman IT\n\n\nPizza Factory\n\n\nKable Academy\n\n\n\n\nGemCity TECH: GemCity.Tech\nThe Innovation Hub: thehubdayton.com\nTechnology First: www.technologyfirst.org\nHuman IT: https://humanit.us/\nPizza Factory: https://pizzafactory.biz/\nKable Academy: Kable Academy puts tech careers within reach for those willing to explore a life in IT. They are change agents, who wield the tools of education, accessibility, and connection."
  },
  {
    "objectID": "OpenRemarks.html#code-of-conduct",
    "href": "OpenRemarks.html#code-of-conduct",
    "title": "Gem City ML",
    "section": "Code of Conduct",
    "text": "Code of Conduct\nWe expect everyone in our space to abide by this Code of Conduct. This includes event attendees, community organizers, sponsors, guests, and board members. Violation of this Code of Conduct could result in being removed from the GemCity TECH community and no longer having access to the associated benefits. If you witness a violation of our Code of Conduct, please notify us. Always feel empowered to say something and please escalate any concerns immediately to someone on the staff or leadership team or email help@gemcity.tech.\nWelcome Everyone\nOur community members are our family. Come hang out with us to learn and collaborate on a wide range of technology topics. We do not tolerate discrimination of any kind, especially on the basis of race, ethnicity, gender, religion, sexual orientation, national origin, disability, gender identity, socioeconomic status, or citizenship status. We are committed to creating a non-hostile meeting and event space for all.\nTreat Others & The Space With Respect\nRespect and allow everyone to express their opinions, concerns, and needs. Listen with the intention to understand. Respect the privacy of everyone in our community.\nPlease pick up after yourself. Treat communal spaces with respect. If you move something, put it back. Leave the space as you found it or better.\nHarassment Is Not Tolerated\nWe do not tolerate harassment of any kind. Unwanted texting, calling, emailing, following, stalking, badgering, intimidating, or threatening will result in being removed from the GemCity TECH community.\nHarassment also includes sexual harassment in any form such as teasing, jokes, innuendos, images, gestures, touching, grabbing, or giving gifts of a sexual or unwanted nature.\nIf someone tries to move on from the conversation, let them go. If someone explicitly tells you to leave them alone, then leave them alone. If you are unsure if your behavior is inappropriate, don’t do it. Always err on the side of making a comfortable environment based on the other person’s standards, not your own.\nProfessional Environment\nGemCity TECH is a community of event attendees, community organizers, sponsors, guests, and board members. This is a professional environment and should be treated as such. These are your peers, so please treat each other like peers. Be courteous, kind, and respectful at all times.\nDiversity Encouraged & Celebrated\nGemCity TECH is committed to building a diverse and inclusive community and believe doing so will lead to better overall collaboration.\nPay It Forward\nBeing part of our community means helping each other out without expectation of anything in return. Help other members of the community by making introductions, sharing your experience, or just listening.\nAbide By The Law\nDo not participate in any illegal activities.\nWe do not allow the use of illegal drugs, illegal hacking, and anything that would put our community in jeopardy.\nSmoking, vaping, or chewing is not allowed in our space.\nDo not take other people’s physical property. Do not take other people’s intellectual property…but, we encourage you to contribute to open source.\nThe GemCity TECH Code of Conduct is a living document managed by our community. If you have any suggestions, please feel free to contact us."
  },
  {
    "objectID": "OpenRemarks.html#other",
    "href": "OpenRemarks.html#other",
    "title": "Gem City ML",
    "section": "Other",
    "text": "Other\nBathrooms\nBathrooms are located in the building\nNearest exit"
  },
  {
    "objectID": "OpenRemarks.html#now-for-our-first-speaker",
    "href": "OpenRemarks.html#now-for-our-first-speaker",
    "title": "Gem City ML",
    "section": "Now, for our first speaker…",
    "text": "Now, for our first speaker…\n\n\n\nGem City Tech ML/AI"
  }
]